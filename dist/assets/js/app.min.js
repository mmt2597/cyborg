!function(){angular.module("myApp",["ui.ace","ui.bootstrap","ui.bootstrap.contextMenu","myApp.Tree_Service","myApp.Tab_Service","myApp.SubTab_Directive","myApp.Resizer_Directive","myApp.NavHeader_Directive","myApp.Main_Controller","myApp.navbarController","myApp.TreeView_Controller","myApp.Tab_Controller","myApp.Ace_Controller","myApp.Preference_Controller"])}(),function(){"use strict";angular.module("myApp.Tab_Controller",[]).controller("TabController",function(){this.tab=1,this.setTab=function(e){this.tab=e},this.isSet=function(e){return this.tab===e}})}(),function(){"use strict";angular.module("myApp.Ace_Controller",[]).controller("aceController",["e", "n", "t", function(e,n,t){n.aceLoaded=function(n){var o=n.getSession();n.renderer;n.setReadOnly(!1),o.setMode("ace/mode/javascript"),o.setUndoManager(new ace.UndoManager),t(function(){var t=e.theme,o=e.fontSize,r=e.tabSize,i=e.gutter,l=e.foldWidget,a=e.printMargin,c=e.showInvisible,u=e.wordWrap,s=e.readOnly;n.setOptions({theme:"ace/theme/"+(void 0!==t?t:"ambiance"),mode:"ace/mode/javascript",readOnly:s,showGutter:i,showPrintMargin:a,showInvisibles:c,showFoldWidgets:l,displayIndentGuides:!0,fontSize:o,tabSize:r,wrap:u})},1e3)}}])}(),function(){"use strict";angular.module("myApp.Main_Controller",[]).controller("mainController",["e", "n", "t", function(e,n,t){e.isVisible=!0,e.showHide=function(){e.isVisible=!e.isVisible},e.showHideConsole=function(){e.isVisible=!e.isVisible},e.tabLength=n.getTab();var o=1;e.addNewTab=function(){n.addTab("untitled",o),o++},e.closeTab=function(e){n.removeTab(e),o--}}])}(),function(){"use strict";angular.module("myApp.navbarController",[]).controller("navbarController",["e", "n", function(e,n){var t,o,r=function(e,r){if(o="folder"==e?"Folder":"File",""!=(t=prompt("Enter New "+o+" Name"))&&null!=t)return o="newfile"==r?{name:t,type:"file"}:{name:t,type:"folder",collapse:!0,children:[]},void n.add(o);alert("Invalid Name")};e.nav.newFile=function(){r("file","newfile")},e.nav.newFolder=function(){r("folder","newfolder")}}])}(),function(){"use strict";angular.module("myApp.Preference_Controller",[]).controller("PreferenceController",["e", "n", "t", function(e,n,t){angular.extend(n,{}),t.get("data/ace_theme.json").then(function(e){n.listOfTheme=e.data}),n.watchChangeTheme=function(){e.theme=n.config.name},n.watchChangeFont=function(){var t=event.pageX;console.log(t),e.fontSize=n.config.fontSize},n.watchChangeTabSize=function(){e.tabSize=n.config.tabSize},n.watchChangeGutter=function(){e.gutter=n.config.gutter},n.watchChangeFoldWidget=function(){e.foldWidget=n.config.foldWidget},n.watchChangePrintMargin=function(){e.printMargin=n.config.printMargin},n.watchChangeShowInvisible=function(){e.showInvisible=n.config.showInvisible},n.watchChangeWordWrap=function(){e.wordWrap=n.config.wordWrap},n.watchChangeReadOnly=function(){e.readOnly=n.config.readOnly}}])}(),function(){"use strict";angular.module("myApp.TreeView_Controller",[]).controller("treeViewController",["e", "n", function(e,n){console.log("AX ",n.getData()),e.treeDirectories=n.getData();var t,o,r=function(e,n,o){var r="folder"==n?"Folder":"File";if(""!=(t=prompt("Enter New "+r+" Name"))&&null!=t){var r="newfile"==o?{name:t,type:"file"}:{name:t,type:"folder",collapse:!0,children:[]};return"folder"==n?(e.push(r),void console.log("Children")):(e.push(r),void console.log("collection"))}alert("Invalid Name")};e.menuOptions=[["New File",function(e){"folder"===e.node.type&&(o=e.node.children,r(o,"file","newfile")),"file"===e.node.type&&(o=e.$parent.collection,r(o,"file","newfile"));var n=document.getElementsByClassName("json")[0];console.log(n)}],["New Folder",function(e){"folder"===e.node.type&&(o=e.node.children,r(o,"folder","newfolder")),"file"===e.node.type&&(o=e.$parent.collection,r(o,"folder","newfolder"))}],["Rename",function(e){var n=e.node.name,t=prompt("Change file name",n);if(t===n)return void alert("You didn't change the name");e.node.name=t}],["Delete",function(e){console.log(angular.toJson(e.node)),e.$parent.collection.splice(e.$parent.$index,1)}]]}])}(),function(){"use strict";angular.module("myApp.NavHeader_Directive",[]).directive("navHeader",function(){return{restrict:"E",templateUrl:"src/views/components/NavHeader.html"}})}(),function(){"use strict";angular.module("myApp.Resizer_Directive",[]).directive("resizer",["e", function(e){return{link:function(n,t,o){function r(e){if(e.preventDefault(),"vertical"==o.resizer){var n=e.pageX;o.resizerMax&&n>o.resizerMax&&(n=parseInt(o.resizerMax)),o.resizerMax&&n<o.resizerMin&&(n=55),document.querySelector(o.resizerLeft.toString()).style.width=n-55+"px"}else{var t=e.pageY;o.resizerYMax&&n>o.resizerYMax&&(t=parseInt(o.resizerYMax)),o.resizerYMax&&n<o.resizerYMin&&(t=55),document.querySelector(o.resizerBottom.toString()).style.height=555-t+"px"}}function i(){e.unbind("mousemove",r),e.unbind("mouseup",i)}t.on("mousedown",function(n){n.preventDefault(),e.on("mousemove",r),e.on("mouseup",i)})}}}])}(),function(){"use strict";angular.module("myApp.SubTab_Directive",[]).directive("subContent",function(){return{restrict:"E",templateUrl:"src/views/components/SubTab.html"}})}(),function(){"use strict";angular.module("myApp.Tab_Service",[]).factory("TabService",function(){var e=[],n={};return n.addTab=function(n,t){e.push({name:n,id:t}),console.log("ADDED")},n.removeTab=function(n){e.splice(n,1)},n.getTab=function(){return e},n})}(),function(){"use strict";angular.module("myApp.Tree_Service",[]).factory("TreeService",["e", function(e){var n={},t=[{name:"GulpSrc",type:"folder",collapse:!0,children:[{name:"CSS",type:"folder",collapse:!1,children:[{name:"style1.css",type:"file"},{name:"style2.css",type:"file"}]}]},{name:"SGulpSrc",type:"folder",collapse:!0,children:[{name:"CSS",type:"folder",collapse:!1,children:[{name:"style1.css",type:"file"},{name:"style2.css",type:"file"}]}]}];return n.add=function(e){t.push(e)},n.delete=function(){!function(e){for(var n in e)console.log(e[n]),console.log(angular.toJson(e[n]))}(t)},n.getData=function(){return console.log(t),t},n}])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
